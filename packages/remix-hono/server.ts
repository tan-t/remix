// IDK why this is needed when it's in the tsconfig..........
// YAY PROJECT REFERENCES!
/// <reference lib="DOM.Iterable" />

import type * as hono from "hono";
import type { AppLoadContext, ServerBuild } from "@remix-run/node";
import {
  createRequestHandler as createRemixRequestHandler,
} from "@remix-run/node";

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action, such as
 * values that are generated by Hono middleware like `req.session`.
 */
export type GetLoadContextFunction = (
  req: hono.HonoRequest,
) => Promise<AppLoadContext> | AppLoadContext;

export type RequestHandler<X extends hono.Env> = hono.Handler<X>;
/**
 * Returns a request handler for Hono that serves the response using Remix.
 */
export function createRequestHandler<X extends hono.Env>({
  build,
  getLoadContext,
  mode = process.env.NODE_ENV,
}: {
  build: ServerBuild | (() => Promise<ServerBuild>);
  getLoadContext?: GetLoadContextFunction;
  mode?: string;
}): RequestHandler<X> {
  const handleRequest = createRemixRequestHandler(build, mode);

  return async (
    c: hono.Context<X>
  ) => {
    const loadContext = await getLoadContext?.(c.req);
    const response = await handleRequest(c.req.raw, loadContext);
    const newResponse = new Response(response.body, response);
    newResponse.headers.set("X-Powered-By", "Hono");
    return newResponse;
  };
}
